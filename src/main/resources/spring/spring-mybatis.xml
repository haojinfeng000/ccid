<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.2.xsd 
	http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
     <!-- 自动扫描 -->  
      <context:component-scan base-package="com.sdlx" >
     	 <context:exclude-filter type ="annotation" expression= "org.springframework.stereotype.Service" />
     	<context:exclude-filter type ="annotation" expression= "org.springframework.stereotype.Controller" />
     </context:component-scan>   
     <!-- 引入配置文件 -->  
    <!-- <bean id="propertyConfigurer"
         class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
         <property name="location" value="classpath:jdbc.properties" />
     </bean>-->
   <!-- <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>-->
    <bean id="refProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
         destroy-method="close">  
         <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <!-- <property name="driverClassName" value="${jdbc.driver}" />-->
         <property name="url" value="jdbc:mysql://localhost:3306/fcroom?allowMultiQueries=true" />
         <property name="username" value="ssy" />
         <property name="password" value="ssy" />
        <!-- &lt;!&ndash; 初始化连接大小 &ndash;&gt;
         <property name="initialSize" value="${initialSize}"></property>  
         &lt;!&ndash; 连接池最大数量 &ndash;&gt;
         <property name="maxTotal" value="${maxActive}"></property> 
         &lt;!&ndash; 连接池最大空闲 &ndash;&gt;
         <property name="maxIdle" value="${maxIdle}"></property>  
         &lt;!&ndash; 连接池最小空闲 &ndash;&gt;
         <property name="minIdle" value="${minIdle}"></property>  
         &lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;
         <property name="maxWaitMillis" value="${maxWait}"></property>   -->
     </bean>  
   
     <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <property name="dataSource" ref="dataSource" />  
         <!-- 自动扫描mapping.xml文件 -->
         <property name="mapperLocations" value="classpath:com/sdlx/mapper/*.xml"></property>
     </bean>  
   
     <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
         <property name="basePackage" value="com.sdlx.dao" />
         <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>  
     </bean>  
   
     <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
     <bean id="transactionManager"  
         class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
         <property name="dataSource" ref="dataSource" />  
     </bean>  
   
  	<!-- <tx:annotation-driven transaction-manager="transactionManager"/>  -->
   	
    <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" />
            <tx:method name="check*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" read-only="false" />
        </tx:attributes>
    </tx:advice>
    
    <aop:config expose-proxy="true">
        &lt;!&ndash;只对业务逻辑层实施事务  &ndash;&gt;
        <aop:pointcut id="txPointcut" expression="execution(* com.sdlx..*.service..*.*(..))" />
        &lt;!&ndash;Advisor定义，切入点和通知分别为txPointcut、txAdvice  &ndash;&gt;
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>-->
 </beans>  
